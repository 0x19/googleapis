// A query annotation contains web search queries and/or related images results
// related to the input image.

syntax = "proto3";

package google.cloud.vision.v1;

import "google/api/annotations.proto";

option java_multiple_files = true;
option java_package = "com.google.cloud.vision.v1";
option java_outer_classname = "QueryAnnotationProto";
option cc_enable_arenas = true;


// A query annotation contains web search queries and/or related images results
// related to the input image.
message QueryAnnotation {
  // Web search queries.  There are more than one because it's often
  // ambiguous what the user's intention was in conducting a visual search.
  // The queries are sorted from best to worst using available signals, like
  // where the user tapped on the screen, the user's location, etc.
  repeated WebSearchQuery web_search_queries = 1;

  // A query returning images related to the query image in the request.
  // As compared to WebSearchQuery, where a typical result is a standard
  // web search result page based on the deduced query, e.g. [popsicle], a
  // typical related images query will be a image search result page of
  // popsicles similar/related to the input image.
  RelatedImagesQuery related_images_query = 2;

  // A unique ID for every request generated by the client, passed through the
  // server, and will be returned to the client in the corresponding response.
  // This ID is used to track request-response pairs for debugging purpose.
  // Notice that two content-wise identical requests received at different
  // times will share the same sha256_request_hash, but they will have
  // different request_ids.
  string request_id = 4;

  // Time elapsed between the moment when a request is sent to the backend
  // server and the moment when a reply is received. This is the overall
  // backend server latency.
  int64 server_elapsed_time_ms = 5;

  // A unique ID that was originally set by the client in the request and is
  // returned back as is in the response.
  string session_id = 6;

  // A list of experiments enabled at the time when the annotation is generated.
  repeated string experiments = 7;
};

// A web search query, possibly including additional suggested queries.
message WebSearchQuery {
  // The web search query.
  Query query = 1;

  // Zero or more suggested queries.  E.g., if the query is [popsicle],
  // a suggested query could be [popsicle sticks].
  repeated Query suggested_queries = 2;
};

// A related images query.
message RelatedImagesQuery {
  // The related image query.
  Query query = 1;
};

// Information related to a topic/concept manifested as a query.
message Query {
  // The URL that the client can fetch and render.
  // E.g., for a web search, this could be like "google.com/?q=foo".
  string url = 1;

  // If this URL is a suggested query, then the display_text field may
  // contain an abbreviated form of the query in the url field. The
  // query_text field will contain the actual query that will be used
  // to construct the URL.
  // E.g., if the base query is [popsicle] and the suggested query is
  // [popsicle sticks], the display_text field may simply hold "sticks",
  // and the query_text field "popsicle sticks".
  // Similarly, if the suggested query is [strawberry popsicle], the
  // display_text field may simply hold "strawberry" and the query_text
  // field "strawberry popsicle". We expect the user to be able to
  // comprehend the suggested query correctly based on the context.

  // The text that the client should display on a touch target that leads
  // to the URL being rendered.
  // E.g. "sticks".
  string display_text = 2;

  // The actual query text that will be used to construct the URL.
  // E.g. "popsicle sticks".
  string query_text = 3;

  // Entities associated with the query. Often these entities come from KG
  // (Knowledge Graph).
  // E.g.
  //   entities {
  //     id: "/m/01t032"
  //     name: "Golden Retriever"
  //     collections: "dog"
  //     collections: "pet"
  //   }
  repeated Entity entities = 4;

  // Questions related to the query.
  // E.g. Say the query is "popsicle sticks", the questions can be
  //   "Who invented popsicle sticks?"
  //   "What is another name for popsicle sticks?"
  //   "What are popsicle stick jokes?"
  //   "Where can I buy popsicle sticks?"
  //   ...
  repeated string questions = 5;

  // Promotional image URL. Typically an image that is related to the query and
  // is to be shown on the iGSA promo card.
  // E.g. http://t0.gstatic.com/images?q=tbn:ANd9Gc...
  string promo_image_url = 6;
};

// Entity associated with a query (for disambiguation). Often this is a KG
// (Knowledge Graph) entity.
message Entity {
  // A unique ID for the entity. Often this is a KG (Knowledge Graph) mid.
  string id = 1;

  // Human-readable name of the entity.
  string name = 2;

  // A list of collection names/ids associated with the entity.
  repeated string collections = 3;
};